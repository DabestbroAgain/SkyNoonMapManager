using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UAssetAPI.ExportTypes;
using UAssetAPI.PropertyTypes.Objects;
using UAssetAPI.UnrealTypes;
using UAssetAPI;
using UAssetAPI.PropertyTypes.Structs;
using UAssetAPI.IO;
using UAssetAPI.UnrealTypes.EngineEnums;
using System.Diagnostics;

namespace SNMapManager
{
    internal class Program
    {
        public static int GamemodeCheck(string gamemodeString)
        {
            switch (gamemodeString)
            {
                case "FFA":
                    return 0;
                case "CART":
                    return 1;
                case "TDM":
                    return 2;
                case "KOTH":
                    return 3;
                case "MB":
                    return 4;
                default:
                    return -1;
            }
        }

        public static List<string> ExploreDirectory(string path)
        {
            List<string> res = new List<string>();
            if (Directory.Exists(path))
            {
                res.Add(path);

                foreach (string i in Directory.GetDirectories(path))
                {
                    res.Add(i);

                    foreach (string j in Directory.GetDirectories(i))
                    {
                        res.Add(j);
                    }
                }
            }

            return res;
        }

        public static List<string[]> ParseDirectoryFiles(string path)
        {
            List<string[]> res = new List<string[]>();

            if (Directory.Exists(path)) {
                foreach (string i in Directory.GetFiles(path))
                {
                    if (i.EndsWith(".txt"))
                    {
                        string[] fileLines = File.ReadAllLines(i);

                        int lineIndex = 0;

                        foreach (string line in fileLines)
                        {
                            lineIndex++;

                            string[] parsed = line.Split('|');

                            if (parsed.Length <= 2) { 
                                if (parsed.Length != 1) //exclude error printing for lines that have no | in them whatsoever
                                {
                                    Console.WriteLine("Line " + lineIndex.ToString() + " of " + i + " had " + parsed.Length.ToString() + " arguments, expected 3-5.");
                                }

                            } else
                            {
                                string[] stripParsed = new string[parsed.Length];
                                int index = 0;
                                foreach (string argument in parsed)
                                {
                                    stripParsed[index++] = argument.Trim();
                                }

                                if (GamemodeCheck(stripParsed[0]) != -1)
                                {
                                    res.Add(stripParsed);
                                } else
                                {
                                    Console.WriteLine("Line " + lineIndex.ToString() + " of " + i + ": gamemode argument \"" + stripParsed[0] + "\" was not recognised as a gamemode.");
                                }
                                
                            }
                        }
                        //Console.WriteLine(i);
                    }
                }
            }
            return res;
        }


        public static string EncodeBase64(string json)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(json);
            return System.Convert.ToBase64String(bytes);
        }

        public static string DecodeBase64(string base64)
        {
            byte[] bytes = System.Convert.FromBase64String(base64);
            return Encoding.UTF8.GetString(bytes);
        }


        static public void OutputMapDataJson()
        {
            String folderPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "SkyNoonMapManager\\");
            DirectoryInfo appdataPath = Directory.CreateDirectory(folderPath);

            string filePath;
            string assetJson;
            string assetBase64;
            UAsset tempAsset;

            filePath = Path.Combine(folderPath, "ffajson.txt");
            tempAsset = new UAsset("C:\\Users\\User\\Desktop\\Coding\\Github\\SkyNoonMapManager\\SNMapManager\\Data_MAP_FFA.uasset", EngineVersion.VER_UE4_18);
            assetJson = tempAsset.SerializeJson(false);
            assetBase64 = EncodeBase64(assetJson);
            File.WriteAllText(filePath, assetBase64);

            filePath = Path.Combine(folderPath, "cartjson.txt");
            tempAsset = new UAsset("C:\\Users\\User\\Desktop\\Coding\\Github\\SkyNoonMapManager\\SNMapManager\\Data_MAP_CART.uasset", EngineVersion.VER_UE4_18);
            assetJson = tempAsset.SerializeJson(false);
            assetBase64 = EncodeBase64(assetJson);
            File.WriteAllText(filePath, assetBase64);

            filePath = Path.Combine(folderPath, "tdmjson.txt");
            tempAsset = new UAsset("C:\\Users\\User\\Desktop\\Coding\\Github\\SkyNoonMapManager\\SNMapManager\\Data_MAP_TDM.uasset", EngineVersion.VER_UE4_18);
            assetJson = tempAsset.SerializeJson(false);
            assetBase64 = EncodeBase64(assetJson);
            File.WriteAllText(filePath, assetBase64);

            filePath = Path.Combine(folderPath, "kothjson.txt");
            tempAsset = new UAsset("C:\\Users\\User\\Desktop\\Coding\\Github\\SkyNoonMapManager\\SNMapManager\\Data_MAP_KOTH.uasset", EngineVersion.VER_UE4_18);
            assetJson = tempAsset.SerializeJson(false);
            assetBase64 = EncodeBase64(assetJson);
            File.WriteAllText(filePath, assetBase64);

            filePath = Path.Combine(folderPath, "mbjson.txt");
            tempAsset = new UAsset("C:\\Users\\User\\Desktop\\Coding\\Github\\SkyNoonMapManager\\SNMapManager\\Data_MAP_MB.uasset", EngineVersion.VER_UE4_18);
            assetJson = tempAsset.SerializeJson(false);
            assetBase64 = EncodeBase64(assetJson);
            File.WriteAllText(filePath, assetBase64);
        }

        static public string[] ReadMapFile(string filepath)
        {
            string[] fileLines = File.ReadAllLines(filepath);

            return fileLines;
        }

        static public PropertyData MakeMapEntry(UAsset assetToBind)
        {
            StructPropertyData tempEntry = new StructPropertyData(FName.FromString(assetToBind, "MapArray"));

            List<PropertyData> tempData = new List<PropertyData>();

            tempData.Add(new StrPropertyData(FName.FromString(assetToBind, "sName")));
            tempData[tempData.Count - 1].RawValue = FString.FromString("Template", Encoding.ASCII);

            tempData.Add(new StrPropertyData(FName.FromString(assetToBind, "sFullName")));
            tempData[tempData.Count - 1].RawValue = FString.FromString("Map_Saloon_FFA", Encoding.ASCII);

            tempData.Add(new StrPropertyData(FName.FromString(assetToBind, "sDiscordImageName")));
            tempData[tempData.Count - 1].RawValue = FString.FromString("", Encoding.ASCII);

            /*
            tempData.Add(new ObjectPropertyData(FName.FromString(assetToBind, "pImage")));
            tempData[tempData.Count - 1].RawValue = FPackageIndex.FromRawIndex(-16);

            tempData.Add(new ObjectPropertyData(FName.FromString(assetToBind, "pLoadingImage")));
            tempData[tempData.Count - 1].RawValue = FPackageIndex.FromRawIndex(-19);
            */

            tempEntry.Value = tempData;

            return (PropertyData) tempEntry;
        }

        static public PropertyData MakeMapEntry(UAsset assetToBind, String MapDisplayName, String MapFileName)
        {
            StructPropertyData tempEntry = new StructPropertyData(FName.FromString(assetToBind, "MapArray"));

            List<PropertyData> tempData = new List<PropertyData>();

            tempData.Add(new StrPropertyData(FName.FromString(assetToBind, "sName")));
            tempData[tempData.Count - 1].RawValue = FString.FromString(MapDisplayName, Encoding.ASCII);

            tempData.Add(new StrPropertyData(FName.FromString(assetToBind, "sFullName")));
            tempData[tempData.Count - 1].RawValue = FString.FromString(MapFileName, Encoding.ASCII);

            tempData.Add(new StrPropertyData(FName.FromString(assetToBind, "sDiscordImageName")));
            tempData[tempData.Count - 1].RawValue = FString.FromString("", Encoding.ASCII);

            tempEntry.Value = tempData;

            return (PropertyData) tempEntry;
        }

        static public PropertyData MakeMapEntry(UAsset assetToBind, String MapDisplayName, String MapFileName, String PreviewImageName, String LoadingImageName)
        {
            FPackageIndex zIndex = FPackageIndex.FromRawIndex(0);
            int newIndex;

            newIndex = assetToBind.Imports.Count;
            Import previewPackage = new Import("/Script/CoreUObject", "Package", zIndex, "/Game/Textures/UI/" + PreviewImageName, false, assetToBind);
            assetToBind.Imports.Add(previewPackage);
            int previewIndex = (newIndex + 2) * -1;
            //Console.WriteLine(previewIndex);
            Import previewTexture = new Import("/Script/Engine", "Texture2D", FPackageIndex.FromImport(newIndex), PreviewImageName, false, assetToBind);
            assetToBind.Imports.Add(previewTexture);

            newIndex = assetToBind.Imports.Count;
            Import loadingPackage = new Import("/Script/CoreUObject", "Package", zIndex, "/Game/Textures/UI/" + LoadingImageName, false, assetToBind);
            assetToBind.Imports.Add(loadingPackage);
            int loadingIndex = (newIndex + 2) * -1;
            //Console.WriteLine(loadingIndex);
            Import loadingTexture = new Import("/Script/Engine", "Texture2D", FPackageIndex.FromImport(newIndex), LoadingImageName, false, assetToBind);
            assetToBind.Imports.Add(loadingTexture);

            StructPropertyData tempEntry = new StructPropertyData(FName.FromString(assetToBind, "MapArray"));

            List<PropertyData> tempData = new List<PropertyData>();

            tempData.Add(new StrPropertyData(FName.FromString(assetToBind, "sName")));
            tempData[tempData.Count - 1].RawValue = FString.FromString(MapDisplayName, Encoding.ASCII);

            tempData.Add(new StrPropertyData(FName.FromString(assetToBind, "sFullName")));
            tempData[tempData.Count - 1].RawValue = FString.FromString(MapFileName, Encoding.ASCII);

            tempData.Add(new StrPropertyData(FName.FromString(assetToBind, "sDiscordImageName")));
            tempData[tempData.Count - 1].RawValue = FString.FromString("", Encoding.ASCII);

            tempData.Add(new ObjectPropertyData(FName.FromString(assetToBind, "pImage")));
            tempData[tempData.Count - 1].RawValue = FPackageIndex.FromRawIndex(previewIndex);

            tempData.Add(new ObjectPropertyData(FName.FromString(assetToBind, "pLoadingImage")));
            tempData[tempData.Count - 1].RawValue = FPackageIndex.FromRawIndex(loadingIndex);

            tempEntry.Value = tempData;

            return (PropertyData)tempEntry;
        }

        static void Main(string[] args)
        {
            String appDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "SkyNoonMapManager\\");
            DirectoryInfo appdataDirectory = Directory.CreateDirectory(appDataPath);

            String packingDataPath = Path.Combine(appDataPath, "SkyNoon-WindowsNoEditor_P_MapManagerGenerated\\SkyNoon\\Content\\Blueprints\\Data");
            DirectoryInfo packingDirectory = Directory.CreateDirectory(packingDataPath);

            string FFABase64 = "";
            string CARTBase64 = "";
            string TDMBase64 = "";
            string KOTHBase64 = "eyIkdHlwZSI6IlVBc3NldEFQSS5VQXNzZXQsIFVBc3NldEFQSSIsIkluZm8iOiJTZXJpYWxpemVkIHdpdGggVUFzc2V0QVBJIDEuMC4wLjAgKDQyZTZkMjMpIiwiTmFtZU1hcCI6WyIvR2FtZS9CbHVlcHJpbnRzL0RhdGEvRGF0YV9NYXBfS09USCIsIi9HYW1lL1RleHR1cmVzL1VJL1RfVUlfaWNlcXVhcnJ5IiwiL0dhbWUvVGV4dHVyZXMvVUkvVF9VSV9Mb2FkaW5nX0hpZ2h0b3duIiwiL0dhbWUvVGV4dHVyZXMvVUkvVF9VSV9Mb2FkaW5nX0hvbWVzdGVhZCIsIi9HYW1lL1RleHR1cmVzL1VJL1RfVUlfTG9hZGluZ19TYWxvb24iLCIvR2FtZS9UZXh0dXJlcy9VSS9UX1VJX0xvYWRpbmdfVG93ZXJzIiwiL0dhbWUvVGV4dHVyZXMvVUkvVF9VSV9Mb2FkaW5nX1doaXJsd2luZCIsIi9HYW1lL1RleHR1cmVzL1VJL1RfVUlfTG9hZHNjcmVlbl9JY2VxdWFycnkiLCIvR2FtZS9UZXh0dXJlcy9VSS9UX1VJX01hcF9IaWdodG93biIsIi9HYW1lL1RleHR1cmVzL1VJL1RfVUlfTWFwX0hvbWVzdGVhZCIsIi9HYW1lL1RleHR1cmVzL1VJL1RfVUlfTWFwX1NhbG9vbiIsIi9HYW1lL1RleHR1cmVzL1VJL1RfVUlfTWFwX1Rvd2VycyIsIi9HYW1lL1RleHR1cmVzL1VJL1RfVUlfTWFwX1doaXJsd2luZCIsIi9TY3JpcHQvQ29yZVVPYmplY3QiLCIvU2NyaXB0L0VuZ2luZSIsIi9TY3JpcHQvU2t5Tm9vbiIsIkFycmF5UHJvcGVydHkiLCJDbGFzcyIsIkRhdGFfTWFwX0tPVEgiLCJEZWZhdWx0X19Ta3lOb29uTWFwRGF0YSIsIk1hcEFycmF5IiwiTWFwRGF0YSIsIk5vbmUiLCJPYmplY3RQcm9wZXJ0eSIsIlBhY2thZ2UiLCJwSW1hZ2UiLCJwTG9hZGluZ0ltYWdlIiwic0Rpc2NvcmRJbWFnZU5hbWUiLCJzRnVsbE5hbWUiLCJTa3lOb29uTWFwRGF0YSIsInNOYW1lIiwiU3RyUHJvcGVydHkiLCJTdHJ1Y3RQcm9wZXJ0eSIsIlRfVUlfaWNlcXVhcnJ5IiwiVF9VSV9Mb2FkaW5nX0hpZ2h0b3duIiwiVF9VSV9Mb2FkaW5nX0hvbWVzdGVhZCIsIlRfVUlfTG9hZGluZ19TYWxvb24iLCJUX1VJX0xvYWRpbmdfVG93ZXJzIiwiVF9VSV9Mb2FkaW5nX1doaXJsd2luZCIsIlRfVUlfTG9hZHNjcmVlbl9JY2VxdWFycnkiLCJUX1VJX01hcF9IaWdodG93biIsIlRfVUlfTWFwX0hvbWVzdGVhZCIsIlRfVUlfTWFwX1NhbG9vbiIsIlRfVUlfTWFwX1Rvd2VycyIsIlRfVUlfTWFwX1doaXJsd2luZCIsIlRleHR1cmUyRCJdLCJMZWdhY3lGaWxlVmVyc2lvbiI6LTcsIlVzZXNFdmVudERyaXZlbkxvYWRlciI6dHJ1ZSwiV2lsbFNlcmlhbGl6ZU5hbWVIYXNoZXMiOnRydWUsIkltcG9ydHMiOlt7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6IlNreU5vb25NYXBEYXRhIiwiT3V0ZXJJbmRleCI6LTE0LCJDbGFzc1BhY2thZ2UiOiIvU2NyaXB0L0NvcmVVT2JqZWN0IiwiQ2xhc3NOYW1lIjoiQ2xhc3MiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6Ii9HYW1lL1RleHR1cmVzL1VJL1RfVUlfaWNlcXVhcnJ5IiwiT3V0ZXJJbmRleCI6MCwiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9Db3JlVU9iamVjdCIsIkNsYXNzTmFtZSI6IlBhY2thZ2UiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6Ii9HYW1lL1RleHR1cmVzL1VJL1RfVUlfTG9hZGluZ19IaWdodG93biIsIk91dGVySW5kZXgiOjAsIkNsYXNzUGFja2FnZSI6Ii9TY3JpcHQvQ29yZVVPYmplY3QiLCJDbGFzc05hbWUiOiJQYWNrYWdlIiwiYkltcG9ydE9wdGlvbmFsIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5JbXBvcnQsIFVBc3NldEFQSSIsIk9iamVjdE5hbWUiOiIvR2FtZS9UZXh0dXJlcy9VSS9UX1VJX0xvYWRpbmdfSG9tZXN0ZWFkIiwiT3V0ZXJJbmRleCI6MCwiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9Db3JlVU9iamVjdCIsIkNsYXNzTmFtZSI6IlBhY2thZ2UiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6Ii9HYW1lL1RleHR1cmVzL1VJL1RfVUlfTG9hZGluZ19TYWxvb24iLCJPdXRlckluZGV4IjowLCJDbGFzc1BhY2thZ2UiOiIvU2NyaXB0L0NvcmVVT2JqZWN0IiwiQ2xhc3NOYW1lIjoiUGFja2FnZSIsImJJbXBvcnRPcHRpb25hbCI6ZmFsc2V9LHsiJHR5cGUiOiJVQXNzZXRBUEkuSW1wb3J0LCBVQXNzZXRBUEkiLCJPYmplY3ROYW1lIjoiL0dhbWUvVGV4dHVyZXMvVUkvVF9VSV9Mb2FkaW5nX1Rvd2VycyIsIk91dGVySW5kZXgiOjAsIkNsYXNzUGFja2FnZSI6Ii9TY3JpcHQvQ29yZVVPYmplY3QiLCJDbGFzc05hbWUiOiJQYWNrYWdlIiwiYkltcG9ydE9wdGlvbmFsIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5JbXBvcnQsIFVBc3NldEFQSSIsIk9iamVjdE5hbWUiOiIvR2FtZS9UZXh0dXJlcy9VSS9UX1VJX0xvYWRpbmdfV2hpcmx3aW5kIiwiT3V0ZXJJbmRleCI6MCwiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9Db3JlVU9iamVjdCIsIkNsYXNzTmFtZSI6IlBhY2thZ2UiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6Ii9HYW1lL1RleHR1cmVzL1VJL1RfVUlfTG9hZHNjcmVlbl9JY2VxdWFycnkiLCJPdXRlckluZGV4IjowLCJDbGFzc1BhY2thZ2UiOiIvU2NyaXB0L0NvcmVVT2JqZWN0IiwiQ2xhc3NOYW1lIjoiUGFja2FnZSIsImJJbXBvcnRPcHRpb25hbCI6ZmFsc2V9LHsiJHR5cGUiOiJVQXNzZXRBUEkuSW1wb3J0LCBVQXNzZXRBUEkiLCJPYmplY3ROYW1lIjoiL0dhbWUvVGV4dHVyZXMvVUkvVF9VSV9NYXBfSGlnaHRvd24iLCJPdXRlckluZGV4IjowLCJDbGFzc1BhY2thZ2UiOiIvU2NyaXB0L0NvcmVVT2JqZWN0IiwiQ2xhc3NOYW1lIjoiUGFja2FnZSIsImJJbXBvcnRPcHRpb25hbCI6ZmFsc2V9LHsiJHR5cGUiOiJVQXNzZXRBUEkuSW1wb3J0LCBVQXNzZXRBUEkiLCJPYmplY3ROYW1lIjoiL0dhbWUvVGV4dHVyZXMvVUkvVF9VSV9NYXBfSG9tZXN0ZWFkIiwiT3V0ZXJJbmRleCI6MCwiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9Db3JlVU9iamVjdCIsIkNsYXNzTmFtZSI6IlBhY2thZ2UiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6Ii9HYW1lL1RleHR1cmVzL1VJL1RfVUlfTWFwX1NhbG9vbiIsIk91dGVySW5kZXgiOjAsIkNsYXNzUGFja2FnZSI6Ii9TY3JpcHQvQ29yZVVPYmplY3QiLCJDbGFzc05hbWUiOiJQYWNrYWdlIiwiYkltcG9ydE9wdGlvbmFsIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5JbXBvcnQsIFVBc3NldEFQSSIsIk9iamVjdE5hbWUiOiIvR2FtZS9UZXh0dXJlcy9VSS9UX1VJX01hcF9Ub3dlcnMiLCJPdXRlckluZGV4IjowLCJDbGFzc1BhY2thZ2UiOiIvU2NyaXB0L0NvcmVVT2JqZWN0IiwiQ2xhc3NOYW1lIjoiUGFja2FnZSIsImJJbXBvcnRPcHRpb25hbCI6ZmFsc2V9LHsiJHR5cGUiOiJVQXNzZXRBUEkuSW1wb3J0LCBVQXNzZXRBUEkiLCJPYmplY3ROYW1lIjoiL0dhbWUvVGV4dHVyZXMvVUkvVF9VSV9NYXBfV2hpcmx3aW5kIiwiT3V0ZXJJbmRleCI6MCwiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9Db3JlVU9iamVjdCIsIkNsYXNzTmFtZSI6IlBhY2thZ2UiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6Ii9TY3JpcHQvU2t5Tm9vbiIsIk91dGVySW5kZXgiOjAsIkNsYXNzUGFja2FnZSI6Ii9TY3JpcHQvQ29yZVVPYmplY3QiLCJDbGFzc05hbWUiOiJQYWNrYWdlIiwiYkltcG9ydE9wdGlvbmFsIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5JbXBvcnQsIFVBc3NldEFQSSIsIk9iamVjdE5hbWUiOiJEZWZhdWx0X19Ta3lOb29uTWFwRGF0YSIsIk91dGVySW5kZXgiOi0xNCwiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9Ta3lOb29uIiwiQ2xhc3NOYW1lIjoiU2t5Tm9vbk1hcERhdGEiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6IlRfVUlfaWNlcXVhcnJ5IiwiT3V0ZXJJbmRleCI6LTIsIkNsYXNzUGFja2FnZSI6Ii9TY3JpcHQvRW5naW5lIiwiQ2xhc3NOYW1lIjoiVGV4dHVyZTJEIiwiYkltcG9ydE9wdGlvbmFsIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5JbXBvcnQsIFVBc3NldEFQSSIsIk9iamVjdE5hbWUiOiJUX1VJX0xvYWRpbmdfSGlnaHRvd24iLCJPdXRlckluZGV4IjotMywiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9FbmdpbmUiLCJDbGFzc05hbWUiOiJUZXh0dXJlMkQiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6IlRfVUlfTG9hZGluZ19Ib21lc3RlYWQiLCJPdXRlckluZGV4IjotNCwiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9FbmdpbmUiLCJDbGFzc05hbWUiOiJUZXh0dXJlMkQiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6IlRfVUlfTG9hZGluZ19TYWxvb24iLCJPdXRlckluZGV4IjotNSwiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9FbmdpbmUiLCJDbGFzc05hbWUiOiJUZXh0dXJlMkQiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6IlRfVUlfTG9hZGluZ19Ub3dlcnMiLCJPdXRlckluZGV4IjotNiwiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9FbmdpbmUiLCJDbGFzc05hbWUiOiJUZXh0dXJlMkQiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6IlRfVUlfTG9hZGluZ19XaGlybHdpbmQiLCJPdXRlckluZGV4IjotNywiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9FbmdpbmUiLCJDbGFzc05hbWUiOiJUZXh0dXJlMkQiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6IlRfVUlfTG9hZHNjcmVlbl9JY2VxdWFycnkiLCJPdXRlckluZGV4IjotOCwiQ2xhc3NQYWNrYWdlIjoiL1NjcmlwdC9FbmdpbmUiLCJDbGFzc05hbWUiOiJUZXh0dXJlMkQiLCJiSW1wb3J0T3B0aW9uYWwiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkltcG9ydCwgVUFzc2V0QVBJIiwiT2JqZWN0TmFtZSI6IlRfVUlfTWFwX0hpZ2h0b3duIiwiT3V0ZXJJbmRleCI6LTksIkNsYXNzUGFja2FnZSI6Ii9TY3JpcHQvRW5naW5lIiwiQ2xhc3NOYW1lIjoiVGV4dHVyZTJEIiwiYkltcG9ydE9wdGlvbmFsIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5JbXBvcnQsIFVBc3NldEFQSSIsIk9iamVjdE5hbWUiOiJUX1VJX01hcF9Ib21lc3RlYWQiLCJPdXRlckluZGV4IjotMTAsIkNsYXNzUGFja2FnZSI6Ii9TY3JpcHQvRW5naW5lIiwiQ2xhc3NOYW1lIjoiVGV4dHVyZTJEIiwiYkltcG9ydE9wdGlvbmFsIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5JbXBvcnQsIFVBc3NldEFQSSIsIk9iamVjdE5hbWUiOiJUX1VJX01hcF9TYWxvb24iLCJPdXRlckluZGV4IjotMTEsIkNsYXNzUGFja2FnZSI6Ii9TY3JpcHQvRW5naW5lIiwiQ2xhc3NOYW1lIjoiVGV4dHVyZTJEIiwiYkltcG9ydE9wdGlvbmFsIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5JbXBvcnQsIFVBc3NldEFQSSIsIk9iamVjdE5hbWUiOiJUX1VJX01hcF9Ub3dlcnMiLCJPdXRlckluZGV4IjotMTIsIkNsYXNzUGFja2FnZSI6Ii9TY3JpcHQvRW5naW5lIiwiQ2xhc3NOYW1lIjoiVGV4dHVyZTJEIiwiYkltcG9ydE9wdGlvbmFsIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5JbXBvcnQsIFVBc3NldEFQSSIsIk9iamVjdE5hbWUiOiJUX1VJX01hcF9XaGlybHdpbmQiLCJPdXRlckluZGV4IjotMTMsIkNsYXNzUGFja2FnZSI6Ii9TY3JpcHQvRW5naW5lIiwiQ2xhc3NOYW1lIjoiVGV4dHVyZTJEIiwiYkltcG9ydE9wdGlvbmFsIjpmYWxzZX1dLCJEZXBlbmRzTWFwIjpbW11dLCJTb2Z0UGFja2FnZVJlZmVyZW5jZUxpc3QiOltdLCJBc3NldFJlZ2lzdHJ5RGF0YSI6eyIkdHlwZSI6IlN5c3RlbS5CeXRlW10sIG1zY29ybGliIiwiJHZhbHVlIjoiQUFBQUFBPT0ifSwiVmFsb3JhbnRHYXJiYWdlRGF0YSI6bnVsbCwiR2VuZXJhdGlvbnMiOlt7IiR0eXBlIjoiVUFzc2V0QVBJLkZHZW5lcmF0aW9uSW5mbywgVUFzc2V0QVBJIiwiRXhwb3J0Q291bnQiOjEsIk5hbWVDb3VudCI6NDZ9XSwiUGFja2FnZUd1aWQiOiJ7QjUzQkQ3MjgtNEFDRS1GQzZBLUZBNkYtOTRCN0QzQzEyRDUxfSIsIlJlY29yZGVkRW5naW5lVmVyc2lvbiI6eyIkdHlwZSI6IlVBc3NldEFQSS5GRW5naW5lVmVyc2lvbiwgVUFzc2V0QVBJIiwiTWFqb3IiOjAsIk1pbm9yIjowLCJQYXRjaCI6MCwiQ2hhbmdlbGlzdCI6MCwiQnJhbmNoIjpudWxsfSwiUmVjb3JkZWRDb21wYXRpYmxlV2l0aEVuZ2luZVZlcnNpb24iOnsiJHR5cGUiOiJVQXNzZXRBUEkuRkVuZ2luZVZlcnNpb24sIFVBc3NldEFQSSIsIk1ham9yIjowLCJNaW5vciI6MCwiUGF0Y2giOjAsIkNoYW5nZWxpc3QiOjAsIkJyYW5jaCI6bnVsbH0sIkNodW5rSURzIjpbXSwiUGFja2FnZVNvdXJjZSI6OTkyMjMwMTgyLCJGb2xkZXJOYW1lIjoiTm9uZSIsIkdhdGhlcmFibGVUZXh0RGF0YUNvdW50IjowLCJHYXRoZXJhYmxlVGV4dERhdGFPZmZzZXQiOjAsIlNlYXJjaGFibGVOYW1lc09mZnNldCI6MCwiVGh1bWJuYWlsVGFibGVPZmZzZXQiOjAsIkNvbXByZXNzaW9uRmxhZ3MiOjAsIkFkZGl0aW9uYWxQYWNrYWdlc1RvQ29vayI6W10sIk5hbWVzUmVmZXJlbmNlZEZyb21FeHBvcnREYXRhQ291bnQiOjQ2LCJQYXlsb2FkVG9jT2Zmc2V0IjotMSwiRGF0YVJlc291cmNlT2Zmc2V0IjotMSwiZG9XZUhhdmVEZXBlbmRzTWFwIjp0cnVlLCJkb1dlSGF2ZVNvZnRQYWNrYWdlUmVmZXJlbmNlcyI6ZmFsc2UsImRvV2VIYXZlQXNzZXRSZWdpc3RyeURhdGEiOnRydWUsImRvV2VIYXZlV29ybGRUaWxlSW5mbyI6ZmFsc2UsIlVzZVNlcGFyYXRlQnVsa0RhdGFGaWxlcyI6dHJ1ZSwiSXNVbnZlcnNpb25lZCI6dHJ1ZSwiRmlsZVZlcnNpb25MaWNlbnNlZVVFIjowLCJPYmplY3RWZXJzaW9uIjoiVkVSX1VFNF9BRERFRF9TT0ZUX09CSkVDVF9QQVRIIiwiT2JqZWN0VmVyc2lvblVFNSI6IlVOS05PV04iLCJDdXN0b21WZXJzaW9uQ29udGFpbmVyIjpbeyIkdHlwZSI6IlVBc3NldEFQSS5DdXN0b21WZXJzaW9uLCBVQXNzZXRBUEkiLCJOYW1lIjpudWxsLCJLZXkiOiJ7Mzc1RUMxM0MtMDZFNC00OEZCLUI1MDAtODRGMDI2MkE3MTdFfSIsIkZyaWVuZGx5TmFtZSI6IkZDb3JlT2JqZWN0VmVyc2lvbiIsIlZlcnNpb24iOjIsIklzU2VyaWFsaXplZCI6ZmFsc2V9LHsiJHR5cGUiOiJVQXNzZXRBUEkuQ3VzdG9tVmVyc2lvbiwgVUFzc2V0QVBJIiwiTmFtZSI6bnVsbCwiS2V5Ijoie0U0QjA2OEVELUY0OTQtNDJFOS1BMjMxLURBMEIyRTQ2QkI0MX0iLCJGcmllbmRseU5hbWUiOiJGRWRpdG9yT2JqZWN0VmVyc2lvbiIsIlZlcnNpb24iOjIwLCJJc1NlcmlhbGl6ZWQiOmZhbHNlfSx7IiR0eXBlIjoiVUFzc2V0QVBJLkN1c3RvbVZlcnNpb24sIFVBc3NldEFQSSIsIk5hbWUiOm51bGwsIktleSI6IntDRkZDNzQzRi00M0IwLTQ0ODAtOTM5MS0xNERGMTcxRDIwNzN9IiwiRnJpZW5kbHlOYW1lIjoiRkZyYW1ld29ya09iamVjdFZlcnNpb24iLCJWZXJzaW9uIjozMCwiSXNTZXJpYWxpemVkIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5DdXN0b21WZXJzaW9uLCBVQXNzZXRBUEkiLCJOYW1lIjpudWxsLCJLZXkiOiJ7N0I1QUU3NEMtRDI3MC00QzEwLUE5NTgtNTc5ODBCMjEyQTVBfSIsIkZyaWVuZGx5TmFtZSI6IkZTZXF1ZW5jZXJPYmplY3RWZXJzaW9uIiwiVmVyc2lvbiI6NCwiSXNTZXJpYWxpemVkIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5DdXN0b21WZXJzaW9uLCBVQXNzZXRBUEkiLCJOYW1lIjpudWxsLCJLZXkiOiJ7MjlFNTc1REQtRTBBMy00NjI3LTlEMTAtRDI3NjIzMkNEQ0VBfSIsIkZyaWVuZGx5TmFtZSI6IkZBbmltUGh5c09iamVjdFZlcnNpb24iLCJWZXJzaW9uIjoxMiwiSXNTZXJpYWxpemVkIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5DdXN0b21WZXJzaW9uLCBVQXNzZXRBUEkiLCJOYW1lIjpudWxsLCJLZXkiOiJ7NjAxRDE4ODYtQUM2NC00Rjg0LUFBMTYtRDNERTBERUFDN0Q2fSIsIkZyaWVuZGx5TmFtZSI6IkZGb3J0bml0ZU1haW5CcmFuY2hPYmplY3RWZXJzaW9uIiwiVmVyc2lvbiI6MCwiSXNTZXJpYWxpemVkIjpmYWxzZX0seyIkdHlwZSI6IlVBc3NldEFQSS5DdXN0b21WZXJzaW9uLCBVQXNzZXRBUEkiLCJOYW1lIjpudWxsLCJLZXkiOiJ7OUM1NEQ1MjItQTgyNi00RkJFLTk0MjEtMDc0NjYxQjQ4MkQwfSIsIkZyaWVuZGx5TmFtZSI6IkZSZWxlYXNlT2JqZWN0VmVyc2lvbiIsIlZlcnNpb24iOjEwLCJJc1NlcmlhbGl6ZWQiOmZhbHNlfV0sIkV4cG9ydHMiOlt7IiR0eXBlIjoiVUFzc2V0QVBJLkV4cG9ydFR5cGVzLk5vcm1hbEV4cG9ydCwgVUFzc2V0QVBJIiwiRGF0YSI6W3siJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLkFycmF5UHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJBcnJheVR5cGUiOiJTdHJ1Y3RQcm9wZXJ0eSIsIk5hbWUiOiJNYXBBcnJheSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjpbeyIkdHlwZSI6IlVBc3NldEFQSS5Qcm9wZXJ0eVR5cGVzLlN0cnVjdHMuU3RydWN0UHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJTdHJ1Y3RUeXBlIjoiTWFwRGF0YSIsIlNlcmlhbGl6ZU5vbmUiOnRydWUsIlN0cnVjdEdVSUQiOiJ7MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwfSIsIk5hbWUiOiJNYXBBcnJheSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjpbeyIkdHlwZSI6IlVBc3NldEFQSS5Qcm9wZXJ0eVR5cGVzLk9iamVjdHMuU3RyUHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJOYW1lIjoic05hbWUiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6IlNhbG9vbiJ9LHsiJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLlN0clByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiTmFtZSI6InNGdWxsTmFtZSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjoiTUFQX1NhbG9vbl9LT1RIIn0seyIkdHlwZSI6IlVBc3NldEFQSS5Qcm9wZXJ0eVR5cGVzLk9iamVjdHMuU3RyUHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJOYW1lIjoic0Rpc2NvcmRJbWFnZU5hbWUiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6ImxnX3NhbG9vbiJ9LHsiJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLk9iamVjdFByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiTmFtZSI6InBJbWFnZSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjotMjV9LHsiJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLk9iamVjdFByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiTmFtZSI6InBMb2FkaW5nSW1hZ2UiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6LTE5fV19LHsiJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5TdHJ1Y3RzLlN0cnVjdFByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiU3RydWN0VHlwZSI6Ik1hcERhdGEiLCJTZXJpYWxpemVOb25lIjp0cnVlLCJTdHJ1Y3RHVUlEIjoiezAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMH0iLCJOYW1lIjoiTWFwQXJyYXkiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6W3siJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLlN0clByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiTmFtZSI6InNOYW1lIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOiJUb3dlcnMifSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5TdHJQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJzRnVsbE5hbWUiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6Ik1BUF9Ub3dlcnNfS09USCJ9LHsiJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLlN0clByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiTmFtZSI6InNEaXNjb3JkSW1hZ2VOYW1lIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOiJsZ190b3dlcnMifSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5PYmplY3RQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJwSW1hZ2UiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6LTI2fSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5PYmplY3RQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJwTG9hZGluZ0ltYWdlIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOi0yMH1dfSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuU3RydWN0cy5TdHJ1Y3RQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIlN0cnVjdFR5cGUiOiJNYXBEYXRhIiwiU2VyaWFsaXplTm9uZSI6dHJ1ZSwiU3RydWN0R1VJRCI6InswMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDB9IiwiTmFtZSI6Ik1hcEFycmF5IiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOlt7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5TdHJQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJzTmFtZSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjoiSGlnaCBUb3duIn0seyIkdHlwZSI6IlVBc3NldEFQSS5Qcm9wZXJ0eVR5cGVzLk9iamVjdHMuU3RyUHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJOYW1lIjoic0Z1bGxOYW1lIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOiJNQVBfSGlnaHRvd25fS09USCJ9LHsiJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLlN0clByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiTmFtZSI6InNEaXNjb3JkSW1hZ2VOYW1lIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOiJsZ19oaWdodG93biJ9LHsiJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLk9iamVjdFByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiTmFtZSI6InBJbWFnZSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjotMjN9LHsiJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLk9iamVjdFByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiTmFtZSI6InBMb2FkaW5nSW1hZ2UiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6LTE3fV19LHsiJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5TdHJ1Y3RzLlN0cnVjdFByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiU3RydWN0VHlwZSI6Ik1hcERhdGEiLCJTZXJpYWxpemVOb25lIjp0cnVlLCJTdHJ1Y3RHVUlEIjoiezAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMH0iLCJOYW1lIjoiTWFwQXJyYXkiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6W3siJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLlN0clByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiTmFtZSI6InNOYW1lIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOiJIb21lc3RlYWQifSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5TdHJQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJzRnVsbE5hbWUiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6Ik1BUF9Ib21lc3RlYWRfS09USCJ9LHsiJHR5cGUiOiJVQXNzZXRBUEkuUHJvcGVydHlUeXBlcy5PYmplY3RzLlN0clByb3BlcnR5RGF0YSwgVUFzc2V0QVBJIiwiTmFtZSI6InNEaXNjb3JkSW1hZ2VOYW1lIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOiJsZ19ob21lc3RlYWQifSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5PYmplY3RQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJwSW1hZ2UiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6LTI0fSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5PYmplY3RQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJwTG9hZGluZ0ltYWdlIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOi0xOH1dfSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuU3RydWN0cy5TdHJ1Y3RQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIlN0cnVjdFR5cGUiOiJNYXBEYXRhIiwiU2VyaWFsaXplTm9uZSI6dHJ1ZSwiU3RydWN0R1VJRCI6InswMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDB9IiwiTmFtZSI6Ik1hcEFycmF5IiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOlt7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5TdHJQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJzTmFtZSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjoiV2hpcmx3aW5kIn0seyIkdHlwZSI6IlVBc3NldEFQSS5Qcm9wZXJ0eVR5cGVzLk9iamVjdHMuU3RyUHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJOYW1lIjoic0Z1bGxOYW1lIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOiJNYXBfV2hpcmx3aW5kX0tPVEgifSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5TdHJQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJzRGlzY29yZEltYWdlTmFtZSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjoibGdfd2hpcmx3aW5kIn0seyIkdHlwZSI6IlVBc3NldEFQSS5Qcm9wZXJ0eVR5cGVzLk9iamVjdHMuT2JqZWN0UHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJOYW1lIjoicEltYWdlIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOi0yN30seyIkdHlwZSI6IlVBc3NldEFQSS5Qcm9wZXJ0eVR5cGVzLk9iamVjdHMuT2JqZWN0UHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJOYW1lIjoicExvYWRpbmdJbWFnZSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjotMjF9XX0seyIkdHlwZSI6IlVBc3NldEFQSS5Qcm9wZXJ0eVR5cGVzLlN0cnVjdHMuU3RydWN0UHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJTdHJ1Y3RUeXBlIjoiTWFwRGF0YSIsIlNlcmlhbGl6ZU5vbmUiOnRydWUsIlN0cnVjdEdVSUQiOiJ7MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwfSIsIk5hbWUiOiJNYXBBcnJheSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjpbeyIkdHlwZSI6IlVBc3NldEFQSS5Qcm9wZXJ0eVR5cGVzLk9iamVjdHMuU3RyUHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJOYW1lIjoic05hbWUiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6IlBpbm5hY2xlIn0seyIkdHlwZSI6IlVBc3NldEFQSS5Qcm9wZXJ0eVR5cGVzLk9iamVjdHMuU3RyUHJvcGVydHlEYXRhLCBVQXNzZXRBUEkiLCJOYW1lIjoic0Z1bGxOYW1lIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOiJNYXBfSWNlUXVhcnJ5X0tvVEgifSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5TdHJQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJzRGlzY29yZEltYWdlTmFtZSIsIkR1cGxpY2F0aW9uSW5kZXgiOjAsIlZhbHVlIjoibGdfcGlubmFjbGUifSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5PYmplY3RQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJwSW1hZ2UiLCJEdXBsaWNhdGlvbkluZGV4IjowLCJWYWx1ZSI6LTE2fSx7IiR0eXBlIjoiVUFzc2V0QVBJLlByb3BlcnR5VHlwZXMuT2JqZWN0cy5PYmplY3RQcm9wZXJ0eURhdGEsIFVBc3NldEFQSSIsIk5hbWUiOiJwTG9hZGluZ0ltYWdlIiwiRHVwbGljYXRpb25JbmRleCI6MCwiVmFsdWUiOi0yMn1dfV19XSwiT2JqZWN0TmFtZSI6IkRhdGFfTWFwX0tPVEgiLCJPYmplY3RGbGFncyI6IlJGX1B1YmxpYywgUkZfU3RhbmRhbG9uZSwgUkZfVHJhbnNhY3Rpb25hbCIsIlNlcmlhbFNpemUiOjEyNDYsIlNlcmlhbE9mZnNldCI6MjQ3MiwiYkZvcmNlZEV4cG9ydCI6ZmFsc2UsImJOb3RGb3JDbGllbnQiOmZhbHNlLCJiTm90Rm9yU2VydmVyIjpmYWxzZSwiUGFja2FnZUd1aWQiOiJ7MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwfSIsIklzSW5oZXJpdGVkSW5zdGFuY2UiOmZhbHNlLCJQYWNrYWdlRmxhZ3MiOiJQS0dfTm9uZSIsImJOb3RBbHdheXNMb2FkZWRGb3JFZGl0b3JHYW1lIjp0cnVlLCJiSXNBc3NldCI6dHJ1ZSwiR2VuZXJhdGVQdWJsaWNIYXNoIjpmYWxzZSwiU2VyaWFsaXphdGlvbkJlZm9yZVNlcmlhbGl6YXRpb25EZXBlbmRlbmNpZXMiOltdLCJDcmVhdGVCZWZvcmVTZXJpYWxpemF0aW9uRGVwZW5kZW5jaWVzIjpbLTI1LC0xOSwtMjYsLTIwLC0yMywtMTcsLTI0LC0xOCwtMjcsLTIxLC0xNiwtMjJdLCJTZXJpYWxpemF0aW9uQmVmb3JlQ3JlYXRlRGVwZW5kZW5jaWVzIjpbLTEsLTE1XSwiQ3JlYXRlQmVmb3JlQ3JlYXRlRGVwZW5kZW5jaWVzIjpbXSwiUHVibGljRXhwb3J0SGFzaCI6MCwiUGFkZGluZyI6bnVsbCwiRXh0cmFzIjp7IiR0eXBlIjoiU3lzdGVtLkJ5dGVbXSwgbXNjb3JsaWIiLCIkdmFsdWUiOiJBQUFBQUE9PSJ9LCJPdXRlckluZGV4IjowLCJDbGFzc0luZGV4IjotMSwiU3VwZXJJbmRleCI6MCwiVGVtcGxhdGVJbmRleCI6LTE1fV0sIldvcmxkVGlsZUluZm8iOm51bGwsIlBhY2thZ2VGbGFncyI6IlBLR19GaWx0ZXJFZGl0b3JPbmx5IiwiSGFzVW52ZXJzaW9uZWRQcm9wZXJ0aWVzIjpmYWxzZSwiSXNGaWx0ZXJFZGl0b3JPbmx5Ijp0cnVlfQ==";
            string MBBase64 = "";
            
            string[] defaultData = new string[] {FFABase64, CARTBase64, TDMBase64, KOTHBase64, MBBase64};
            string[] mapDataFileNames = new string[] { "Data_Map_FFA.uasset", "Data_Map_CART.uasset", "Data_Map_TDM.uasset", "Data_Map_KOTH.uasset", "Data_Map_MB.uasset" };
            List<string[]>[] newMapData = new List<string[]>[5];
            for (int i = 0; i < newMapData.Length; i++)
            {
                newMapData[i] = new List<string[]>();
            }

            for (int i = 0; i < mapDataFileNames.Length; i++)
            {
                if (!File.Exists(Path.Combine(appDataPath, mapDataFileNames[i])))
                {
                    Console.WriteLine("Default file " + mapDataFileNames[i] + " did not exist, rebuilding. (Probably a first time run)");
                    string output = defaultData[i];
                    string decodedOutput = DecodeBase64(output);

                    UAsset decodedAsset = UAsset.DeserializeJson(decodedOutput);
                    decodedAsset.Write(Path.Combine(appDataPath, mapDataFileNames[i]));
                }
            }

            string directoryToCheck = Directory.GetCurrentDirectory();

            //directoryToCheck = "C:\\Users\\User\\AppData\\Local\\SkyNoonMapManager"; //DEBUG

            Console.WriteLine("Recursively iterating through directory: " + directoryToCheck);

            List<string> res = ExploreDirectory(directoryToCheck);
            

            Console.WriteLine("Found " + res.Count.ToString() + " directories/subdirectories (including current directory)");
            Console.WriteLine("Iterating through .txt files within those directories...");

            foreach (String str in res)
            {
                List<string[]> output = ParseDirectoryFiles(str);



                int count = 0;

                foreach (string[] mapEntry in output)
                {
                    int gamemodeIndex = GamemodeCheck(mapEntry[0]);

                    if (gamemodeIndex != -1)
                    {
                        newMapData[gamemodeIndex].Add(mapEntry);
                        count++;
                    }
                }

                Console.WriteLine("Found " + count + " potential maps in directory " + str);
            }

            foreach (string existingFileCheck in mapDataFileNames)
            {
                string combinedPath = Path.Combine(packingDataPath, existingFileCheck);
                if (File.Exists(combinedPath))
                {
                    Console.WriteLine("Found old file " + existingFileCheck + " from last pak build, deleting...");
                    File.Delete(combinedPath);
                }
                combinedPath = combinedPath.Replace(".uasset", ".uexp");
                //also clean up associated .uexp if it exists
                if (File.Exists(combinedPath))
                {
                    File.Delete(combinedPath);
                }
            }

            for (int i = 0; i < newMapData.Length; i++) {
                if (newMapData[i].Count > 0)
                {
                    string fileToCheck = mapDataFileNames[i];

                    Console.WriteLine("Adding " + newMapData[i].Count.ToString() + " maps to " + fileToCheck);

                    UAsset currentAsset = new UAsset(Path.Combine(appDataPath, fileToCheck), EngineVersion.VER_UE4_18);

                    foreach (Export export in currentAsset.Exports)
                    {
                        if (export is NormalExport)
                        {
                            NormalExport normExport = (NormalExport)export;

                            foreach (PropertyData entry in normExport.Data)
                            {
                                if (entry is ArrayPropertyData)
                                {
                                    ArrayPropertyData mapArrayArray = (ArrayPropertyData)entry;

                                    int index = 0;
                                    PropertyData[] appendArray = new PropertyData[mapArrayArray.Value.Length + newMapData[i].Count];

                                    //add the old maps back into the array
                                    foreach (PropertyData arrayEntry in mapArrayArray.Value)
                                    {
                                        appendArray[index] = arrayEntry;
                                        index++;
                                    }

                                    //this is where we add the new maps
                                    foreach(string[] mapInfo in newMapData[i])
                                    {
                                        PropertyData result;
                                        if (mapInfo.Length >= 5)
                                        {
                                            result = MakeMapEntry(currentAsset, mapInfo[1], mapInfo[2], mapInfo[3], mapInfo[4]);
                                            appendArray[index] = result;
                                        } else if (mapInfo.Length >= 3 && mapInfo.Length < 5)
                                        {
                                            result = MakeMapEntry(currentAsset, mapInfo[1], mapInfo[2]);
                                            appendArray[index] = result;
                                        }

                                        index++;
                                    }


                                    mapArrayArray.Value = appendArray;


                                }
                            }
                        }
                    }

                    //done parsing asset, we write it back now
                    currentAsset.Write(Path.Combine(packingDataPath, fileToCheck));

                    Console.WriteLine("Successfully wrote to packing directory.");


                }
            }


            //OldMain();


            string packingFolderPath = Path.Combine(appDataPath, "SkyNoon-WindowsNoEditor_P_MapManagerGenerated");
            string outputFolderPath = Path.Combine(Directory.GetCurrentDirectory(), "SkyNoon-WindowsNoEditor_P_MapManagerGenerated.pak");

            // Use ProcessStartInfo class
            ProcessStartInfo startInfo = new ProcessStartInfo();
            startInfo.CreateNoWindow = false;
            startInfo.UseShellExecute = false;
            startInfo.FileName = Path.Combine(Directory.GetCurrentDirectory(), "repak.exe");

            startInfo.WindowStyle = ProcessWindowStyle.Normal; //ProcessWindowStyle.Hidden
            startInfo.Arguments = "pack --version V4 " + "\"" + packingFolderPath + "\" \"" + outputFolderPath + "\"";

            Console.WriteLine("Sending the packing folder to repak...");

            try
            {
                // Start the process with the info we specified.
                // Call WaitForExit and then the using statement will close.
                using (Process exeProcess = Process.Start(startInfo))
                {
                    exeProcess.WaitForExit();
                }

                Console.WriteLine("Packing process finished successfully!");
            }
            catch
            {
                Console.WriteLine("Something went wrong in the packing process. (Is repak.exe missing?)");
            }


            Console.Write("Done! Press any key to exit...");

            Console.ReadKey();
        }
    }
}
